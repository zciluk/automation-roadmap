{"version":3,"sources":["components/PopupContent/index.js","components/SingleTree/index.js","components/App/index.js","index.js"],"names":["converter","showndown","Converter","PopupContent","data","ngOnly","Label","attached","color","map","popupDetails","Parser","makeHtml","description","Button","animated","size","href","url","target","Content","visible","urlLabel","hidden","Icon","name","SingleTree","inputArray","chunks","Segment","padded","tertiary","inverted","Grid","columns","stackable","reduce","resultArray","item","index","chunkIndex","Math","floor","push","Row","relaxed","skill","Column","textAlign","Header","Object","keys","values","subSkill","Popup","content","on","pinned","wide","hoverable","trigger","as","compact","fluid","basic","optional","App","useState","localStorage","getItem","isInstructionDisplayed","setIsInstructionDisplayed","handleInstructionModal","setItem","icon","circular","onClick","Transition","animation","duration","Modal","dimmer","open","onClose","Actions","positive","Divider","horizontal","roadmapData","beginner","intermediate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89dc6d2f.chunk.js","sourcesContent":["import { Button, Icon, Label } from \"semantic-ui-react\";\nimport showndown from \"showdown\";\nimport Parser from \"html-react-parser\";\n\nconst converter = new showndown.Converter();\nconst PopupContent = ({ data, ngOnly }) => (\n  <p>\n    {ngOnly && (\n      <Label attached=\"top\" color=\"green\">\n        Netguru only\n      </Label>\n    )}\n    {data.map((popupDetails) => (\n      <p>\n        <p>{Parser(converter.makeHtml(popupDetails.description))}</p>\n        <Button animated size=\"medium\" href={popupDetails.url} target=\"_blank\">\n          <Button.Content visible>{popupDetails.urlLabel}</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"arrow right\" />\n          </Button.Content>\n        </Button>\n      </p>\n    ))}\n  </p>\n);\nexport default PopupContent;\n","import { Popup, Grid, Segment, Header, Button } from \"semantic-ui-react\";\nimport PopupContent from \"../PopupContent\";\n\nconst sliceArray = (inputArray, chunks) => {\n  return inputArray.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / chunks);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = [];\n    }\n\n    resultArray[chunkIndex].push(item);\n\n    return resultArray;\n  }, []);\n};\nconst SingleTree = ({ data, color }) => {\n  return (\n    <Segment padded tertiary inverted color={color}>\n      <Grid columns=\"4\" stackable>\n        {sliceArray(data, 4).map((item) => (\n          <Grid.Row relaxed>\n            {item.map((skill) => (\n              <Grid.Column>\n                <Segment padded textAlign=\"center\">\n                  <Header size=\"medium\" color=\"black\">\n                    {Object.keys(skill)}\n                  </Header>\n                  <br />\n                  <Grid relaxed padded>\n                    {Object.values(skill)[0].map((subSkill) => (\n                      <Grid.Row>\n                        <Popup\n                          content={\n                            <PopupContent\n                              data={subSkill.data}\n                              ngOnly={subSkill.ngOnly}\n                            />\n                          }\n                          on=\"click\"\n                          size=\"small\"\n                          pinned\n                          wide\n                          hoverable\n                          trigger={\n                            <Button\n                              as=\"a\"\n                              compact\n                              fluid\n                              size=\"small\"\n                              color={color}\n                              content={subSkill.name}\n                              basic={subSkill.optional}\n                            />\n                          }\n                        />\n                      </Grid.Row>\n                    ))}\n                  </Grid>\n                </Segment>\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n        ))}\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default SingleTree;\n","import React, { useState } from \"react\";\nimport {\n  Segment,\n  Divider,\n  Header,\n  Icon,\n  Button,\n  Modal,\n  Transition,\n  Label,\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport roadmapData from \"../../data/roadmapData.json\";\nimport SingleTree from \"../SingleTree\";\n\nconst App = () => {\n  const [isInstructionDisplayed, setIsInstructionDisplayed] = useState(\n    localStorage.getItem(\"instructionViewedAR\") ? false : true\n  );\n\n  const handleInstructionModal = () => {\n    localStorage.setItem(\"instructionViewedAR\", true);\n    setIsInstructionDisplayed(!isInstructionDisplayed);\n  };\n\n  return (\n    <Segment>\n      <Header as=\"h2\" icon textAlign=\"center\">\n        <Icon name=\"road\" />\n        Automation roadmap\n        <p>\n          <Label>From zero to automation hero</Label>\n        </p>\n      </Header>\n      <Header as=\"h4\" textAlign=\"center\">\n        <Button circular size=\"small\" basic onClick={handleInstructionModal}>\n          How to use\n        </Button>\n        <Transition\n          visible={isInstructionDisplayed}\n          animation=\"scale\"\n          duration={500}\n        >\n          <Modal\n            dimmer=\"blurring\"\n            open={isInstructionDisplayed}\n            onClose={handleInstructionModal}\n          >\n            <Modal.Header>How to use this roadmap?</Modal.Header>\n            <Modal.Content>\n              <p>\n                Welcome to automation roadmap where you can plan your\n                development in software test automation related sills. You'll\n                find here useful links and paths which will help you to discover\n                which skill to learn next.\n              </p>\n              <p>\n                Skills are sorted into three levels:{\" \"}\n                <Label color=\"teal\">beginner</Label>,{\" \"}\n                <Label color=\"blue\">intermediate</Label> and{\" \"}\n                <Label color=\"purple\">expert</Label> (currently under\n                \"construction\"). Each skill can be expanded by clicking on it:\n                popup with short introduction and links will appear.\n              </p>\n              <p>\n                Items without colors filled are{\" \"}\n                <Label basic color=\"teal\">\n                  optional\n                </Label>{\" \"}\n                skills, which are considered nice to have but not mandatory to\n                learn.\n              </p>\n              <p>\n                Some of the links are available for{\" \"}\n                <Label color=\"green\">Netguru only</Label> - it means they are\n                not available to public audience - apply to us if you want to\n                see them! 😅{\" \"}\n              </p>\n              <p>\n                Made in <a href=\"https://netguru.com\">Netguru</a> with love ♥️\n              </p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button positive onClick={handleInstructionModal}>\n                Close\n              </Button>\n            </Modal.Actions>\n          </Modal>\n        </Transition>\n      </Header>\n      <Divider horizontal>Beginner</Divider>\n      <SingleTree data={roadmapData.beginner} color=\"teal\" />\n      <Divider horizontal>Intermediate</Divider>\n      <SingleTree data={roadmapData.intermediate} color=\"blue\" />\n      <Divider horizontal>Expert</Divider>\n      <Segment size=\"large\" color=\"purple\" inverted>\n        Not available yet, work in progress 👷\n      </Segment>\n    </Segment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}